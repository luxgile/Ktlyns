//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ktlyns.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

 
	using Kat; 
	using System.Collections.Generic;
	
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class KtlynsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, DEC=2, INT=3, TRUE=4, FALSE=5, PLUS=6, MINUS=7, SLASH=8, STAR=9, 
		AMP=10, STR=11, LPRN=12, RPRN=13, LBRC=14, RBRC=15, LBKT=16, RBKT=17, 
		COMMA=18, DOT=19, SDOT=20, EQ=21, IF=22, ELSE=23, AT=24, RET=25, BREAK=26, 
		AND=27, OR=28, NOT=29, EQEQ=30, NEQEQ=31, GREAT=32, EQGREAT=33, LESS=34, 
		EQLESS=35, METHOD=36, EXTERNAL=37, ID=38, COMMENT=39, LINE_COMMENT=40;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_if_else_decl = 4, RULE_loop_decl = 5, RULE_var_decl = 6, RULE_arr_decl = 7, 
		RULE_mth_decl = 8, RULE_ex_mth_decl = 9, RULE_mth = 10, RULE_expr = 11, 
		RULE_unary = 12, RULE_factor = 13, RULE_string = 14, RULE_id = 15, RULE_call_args = 16, 
		RULE_mth_decl_arg = 17;
	public static readonly string[] ruleNames = {
		"program", "block", "statements", "statement", "if_else_decl", "loop_decl", 
		"var_decl", "arr_decl", "mth_decl", "ex_mth_decl", "mth", "expr", "unary", 
		"factor", "string", "id", "call_args", "mth_decl_arg"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'true'", "'false'", "'+'", "'-'", "'/'", "'*'", 
		"'&'", null, "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'.'", "';'", 
		"'='", "'if'", "'else'", "'@'", "'ret'", "'break'", "'&&'", "'||'", "'!'", 
		"'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'method'", "'ext'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "DEC", "INT", "TRUE", "FALSE", "PLUS", "MINUS", "SLASH", "STAR", 
		"AMP", "STR", "LPRN", "RPRN", "LBRC", "RBRC", "LBKT", "RBKT", "COMMA", 
		"DOT", "SDOT", "EQ", "IF", "ELSE", "AT", "RET", "BREAK", "AND", "OR", 
		"NOT", "EQEQ", "NEQEQ", "GREAT", "EQGREAT", "LESS", "EQLESS", "METHOD", 
		"EXTERNAL", "ID", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ktlyns.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KtlynsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KtlynsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KtlynsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public KBlock Block;
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
			this.Block = context.Block;
		}
	}
	public partial class RBlockEmptyContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(KtlynsParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(KtlynsParser.RBRC, 0); }
		public RBlockEmptyContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRBlockEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRBlockEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRBlockEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RBlockStmtsContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(KtlynsParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(KtlynsParser.RBRC, 0); }
		public RBlockStmtsContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRBlockStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRBlockStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRBlockStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new RBlockStmtsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				Match(LBRC);
				State = 39;
				statements();
				State = 40;
				Match(RBRC);
				}
				break;
			case 2:
				_localctx = new RBlockEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				Match(LBRC);
				State = 43;
				Match(RBRC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public KBlock Block;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 46;
				statement();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEC) | (1L << INT) | (1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << STAR) | (1L << AMP) | (1L << STR) | (1L << LPRN) | (1L << IF) | (1L << AT) | (1L << RET) | (1L << BREAK) | (1L << NOT) | (1L << METHOD) | (1L << EXTERNAL) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public KStmt Stmt;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementArrDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arr_declContext arr_decl() {
			return GetRuleContext<Arr_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementArrDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementArrDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementArrDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementArrDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementLoopContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loop_declContext loop_decl() {
			return GetRuleContext<Loop_declContext>(0);
		}
		public RStatementLoopContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementLoop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementIfElseContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_else_declContext if_else_decl() {
			return GetRuleContext<If_else_declContext>(0);
		}
		public RStatementIfElseContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementBreakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KtlynsParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementBreakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementVarDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementVarDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementMthDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mth_declContext mth_decl() {
			return GetRuleContext<Mth_declContext>(0);
		}
		public RStatementMthDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementMthDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementExMthDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ex_mth_declContext ex_mth_decl() {
			return GetRuleContext<Ex_mth_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementExMthDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementExMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementExMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementExMthDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new RStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				expr(0);
				State = 52;
				Match(SDOT);
				}
				break;
			case 2:
				_localctx = new RStatementVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				var_decl();
				State = 55;
				Match(SDOT);
				}
				break;
			case 3:
				_localctx = new RStatementArrDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				arr_decl();
				State = 58;
				Match(SDOT);
				}
				break;
			case 4:
				_localctx = new RStatementIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				if_else_decl();
				}
				break;
			case 5:
				_localctx = new RStatementLoopContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 61;
				loop_decl();
				}
				break;
			case 6:
				_localctx = new RStatementBreakContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 62;
				Match(BREAK);
				State = 63;
				Match(SDOT);
				}
				break;
			case 7:
				_localctx = new RStatementMthDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 64;
				mth_decl();
				}
				break;
			case 8:
				_localctx = new RStatementExMthDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 65;
				ex_mth_decl();
				State = 66;
				Match(SDOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_declContext : ParserRuleContext {
		public KStmt Stmt;
		public If_else_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_decl; } }
	 
		public If_else_declContext() { }
		public virtual void CopyFrom(If_else_declContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RIfElseContext : If_else_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KtlynsParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KtlynsParser.ELSE, 0); }
		public RIfElseContext(If_else_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_declContext if_else_decl() {
		If_else_declContext _localctx = new If_else_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_else_decl);
		try {
			_localctx = new RIfElseContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(IF);
			State = 71;
			Match(LPRN);
			State = 72;
			expr(0);
			State = 73;
			Match(RPRN);
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRC:
				{
				State = 74;
				block();
				}
				break;
			case DEC:
			case INT:
			case TRUE:
			case FALSE:
			case MINUS:
			case STAR:
			case AMP:
			case STR:
			case LPRN:
			case IF:
			case AT:
			case RET:
			case BREAK:
			case NOT:
			case METHOD:
			case EXTERNAL:
			case ID:
				{
				State = 75;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 78;
				Match(ELSE);
				State = 81;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRC:
					{
					State = 79;
					block();
					}
					break;
				case DEC:
				case INT:
				case TRUE:
				case FALSE:
				case MINUS:
				case STAR:
				case AMP:
				case STR:
				case LPRN:
				case IF:
				case AT:
				case RET:
				case BREAK:
				case NOT:
				case METHOD:
				case EXTERNAL:
				case ID:
					{
					State = 80;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_declContext : ParserRuleContext {
		public KStmt Stmt;
		public Loop_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_decl; } }
	 
		public Loop_declContext() { }
		public virtual void CopyFrom(Loop_declContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RLoopTwoContext : Loop_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(KtlynsParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KtlynsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RLoopTwoContext(Loop_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRLoopTwo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRLoopTwo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRLoopTwo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RLoopOneContext : Loop_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(KtlynsParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RLoopOneContext(Loop_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRLoopOne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRLoopOne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRLoopOne(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_declContext loop_decl() {
		Loop_declContext _localctx = new Loop_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_loop_decl);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new RLoopOneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				Match(AT);
				State = 86;
				Match(LPRN);
				State = 87;
				expr(0);
				State = 88;
				Match(RPRN);
				State = 89;
				block();
				}
				break;
			case 2:
				_localctx = new RLoopTwoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(AT);
				State = 92;
				Match(LPRN);
				State = 93;
				expr(0);
				State = 94;
				Match(COMMA);
				State = 95;
				expr(0);
				State = 96;
				Match(RPRN);
				State = 97;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public KStmt Stmt;
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RVarDeclExprContext : Var_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KtlynsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RVarDeclExprContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRVarDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRVarDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRVarDeclExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_var_decl);
		try {
			_localctx = new RVarDeclExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			id(0);
			State = 102;
			id(0);
			State = 103;
			Match(EQ);
			State = 104;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arr_declContext : ParserRuleContext {
		public KStmt Stmt;
		public Arr_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arr_decl; } }
	 
		public Arr_declContext() { }
		public virtual void CopyFrom(Arr_declContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RArrDeclExprContext : Arr_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KtlynsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT() { return GetToken(KtlynsParser.LBKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KtlynsParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT() { return GetToken(KtlynsParser.RBKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public RArrDeclExprContext(Arr_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRArrDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRArrDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRArrDeclExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arr_declContext arr_decl() {
		Arr_declContext _localctx = new Arr_declContext(Context, State);
		EnterRule(_localctx, 14, RULE_arr_decl);
		try {
			_localctx = new RArrDeclExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			id(0);
			State = 107;
			id(0);
			State = 108;
			Match(EQ);
			State = 109;
			Match(LBKT);
			State = 110;
			Match(INT);
			State = 111;
			Match(RBKT);
			State = 112;
			Match(LPRN);
			State = 113;
			expr(0);
			State = 114;
			Match(RPRN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mth_declContext : ParserRuleContext {
		public KStmt Stmt;
		[System.Diagnostics.DebuggerNonUserCode] public MthContext mth() {
			return GetRuleContext<MthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mth_decl_argContext mth_decl_arg() {
			return GetRuleContext<Mth_decl_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Mth_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterMth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitMth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMth_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mth_declContext mth_decl() {
		Mth_declContext _localctx = new Mth_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_mth_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			mth();
			State = 117;
			id(0);
			State = 118;
			Match(LPRN);
			State = 119;
			mth_decl_arg(0);
			State = 120;
			Match(RPRN);
			State = 121;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ex_mth_declContext : ParserRuleContext {
		public KStmt Stmt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(KtlynsParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MthContext mth() {
			return GetRuleContext<MthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mth_decl_argContext mth_decl_arg() {
			return GetRuleContext<Mth_decl_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public Ex_mth_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ex_mth_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterEx_mth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitEx_mth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEx_mth_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ex_mth_declContext ex_mth_decl() {
		Ex_mth_declContext _localctx = new Ex_mth_declContext(Context, State);
		EnterRule(_localctx, 18, RULE_ex_mth_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(EXTERNAL);
			State = 124;
			mth();
			State = 125;
			id(0);
			State = 126;
			Match(LPRN);
			State = 127;
			mth_decl_arg(0);
			State = 128;
			Match(RPRN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MthContext : ParserRuleContext {
		public KId Id;
		public MthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth; } }
	 
		public MthContext() { }
		public virtual void CopyFrom(MthContext context) {
			base.CopyFrom(context);
			this.Id = context.Id;
		}
	}
	public partial class RMthVoidContext : MthContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(KtlynsParser.METHOD, 0); }
		public RMthVoidContext(MthContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthTypeContext : MthContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(KtlynsParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(KtlynsParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT() { return GetToken(KtlynsParser.GREAT, 0); }
		public RMthTypeContext(MthContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MthContext mth() {
		MthContext _localctx = new MthContext(Context, State);
		EnterRule(_localctx, 20, RULE_mth);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new RMthVoidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(METHOD);
				}
				break;
			case 2:
				_localctx = new RMthTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(METHOD);
				State = 132;
				Match(LESS);
				State = 133;
				id(0);
				State = 134;
				Match(GREAT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public KExpr Expr;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.Expr = context.Expr;
		}
	}
	public partial class RExprUnaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public RExprUnaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinAddContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KtlynsParser.PLUS, 0); }
		public RExprBinAddContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KtlynsParser.MINUS, 0); }
		public RExprBinSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinEGreatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQGREAT() { return GetToken(KtlynsParser.EQGREAT, 0); }
		public RExprBinEGreatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinEGreat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinEGreat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinEGreat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public RExprCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprReturnContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET() { return GetToken(KtlynsParser.RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RExprReturnContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprIdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public RExprIdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinLessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(KtlynsParser.LESS, 0); }
		public RExprBinLessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinLess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinLess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinLess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinAndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(KtlynsParser.AND, 0); }
		public RExprBinAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(KtlynsParser.SLASH, 0); }
		public RExprBinDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprAssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KtlynsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RExprAssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinEqContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(KtlynsParser.EQEQ, 0); }
		public RExprBinEqContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinELessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQLESS() { return GetToken(KtlynsParser.EQLESS, 0); }
		public RExprBinELessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinELess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinELess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinELess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(KtlynsParser.OR, 0); }
		public RExprBinOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinMultContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KtlynsParser.STAR, 0); }
		public RExprBinMultContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinGreatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT() { return GetToken(KtlynsParser.GREAT, 0); }
		public RExprBinGreatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinGreat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinGreat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinGreat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public RExprStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprGroupContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public RExprGroupContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinNEqContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQEQ() { return GetToken(KtlynsParser.NEQEQ, 0); }
		public RExprBinNEqContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinNEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinNEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinNEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new RExprStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 139;
				@string();
				}
				break;
			case 2:
				{
				_localctx = new RExprIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				id(0);
				}
				break;
			case 3:
				{
				_localctx = new RExprCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141;
				id(0);
				State = 142;
				Match(LPRN);
				State = 143;
				call_args(0);
				State = 144;
				Match(RPRN);
				}
				break;
			case 4:
				{
				_localctx = new RExprGroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146;
				Match(LPRN);
				State = 147;
				expr(0);
				State = 148;
				Match(RPRN);
				}
				break;
			case 5:
				{
				_localctx = new RExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				unary();
				}
				break;
			case 6:
				{
				_localctx = new RExprAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				id(0);
				State = 152;
				Match(EQ);
				State = 153;
				expr(2);
				}
				break;
			case 7:
				{
				_localctx = new RExprReturnContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				Match(RET);
				State = 157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 156;
					expr(0);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new RExprBinMultContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 161;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 162;
						Match(STAR);
						State = 163;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new RExprBinDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 164;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 165;
						Match(SLASH);
						State = 166;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new RExprBinAddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 167;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 168;
						Match(PLUS);
						State = 169;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new RExprBinSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 170;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 171;
						Match(MINUS);
						State = 172;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new RExprBinEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 173;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 174;
						Match(EQEQ);
						State = 175;
						expr(11);
						}
						break;
					case 6:
						{
						_localctx = new RExprBinNEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 176;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 177;
						Match(NEQEQ);
						State = 178;
						expr(10);
						}
						break;
					case 7:
						{
						_localctx = new RExprBinGreatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 179;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 180;
						Match(GREAT);
						State = 181;
						expr(9);
						}
						break;
					case 8:
						{
						_localctx = new RExprBinEGreatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 182;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 183;
						Match(EQGREAT);
						State = 184;
						expr(8);
						}
						break;
					case 9:
						{
						_localctx = new RExprBinLessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 185;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 186;
						Match(LESS);
						State = 187;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new RExprBinELessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 188;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 189;
						Match(EQLESS);
						State = 190;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new RExprBinAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 191;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 192;
						Match(AND);
						State = 193;
						expr(5);
						}
						break;
					case 12:
						{
						_localctx = new RExprBinOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 194;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 195;
						Match(OR);
						State = 196;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public KExpr Expr;
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
			this.Expr = context.Expr;
		}
	}
	public partial class RUnaryNotContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(KtlynsParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public RUnaryNotContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRUnaryNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRUnaryNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRUnaryNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RUnaryFactorContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public RUnaryFactorContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRUnaryFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRUnaryFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRUnaryFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RUnaryMinusContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KtlynsParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public RUnaryMinusContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_unary);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC:
			case INT:
			case TRUE:
			case FALSE:
				_localctx = new RUnaryFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				factor();
				}
				break;
			case MINUS:
				_localctx = new RUnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(MINUS);
				State = 204;
				factor();
				}
				break;
			case NOT:
				_localctx = new RUnaryNotContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				Match(NOT);
				State = 206;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public KExpr Expr;
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
			this.Expr = context.Expr;
		}
	}
	public partial class RFactorIntContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KtlynsParser.INT, 0); }
		public RFactorIntContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRFactorInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRFactorInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRFactorInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RFactorFalseContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(KtlynsParser.FALSE, 0); }
		public RFactorFalseContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRFactorFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRFactorFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRFactorFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RFactorDecContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(KtlynsParser.DEC, 0); }
		public RFactorDecContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRFactorDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRFactorDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRFactorDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RFactorTrueContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(KtlynsParser.TRUE, 0); }
		public RFactorTrueContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRFactorTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRFactorTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRFactorTrue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 26, RULE_factor);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new RFactorIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				Match(INT);
				}
				break;
			case DEC:
				_localctx = new RFactorDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(DEC);
				}
				break;
			case TRUE:
				_localctx = new RFactorTrueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 211;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new RFactorFalseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 212;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public KStr Str;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(KtlynsParser.STR, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 28, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public KId Id;
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	 
		public IdContext() { }
		public virtual void CopyFrom(IdContext context) {
			base.CopyFrom(context);
			this.Id = context.Id;
		}
	}
	public partial class RIDPointerContext : IdContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(KtlynsParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(KtlynsParser.STAR, i);
		}
		public RIDPointerContext(IdContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRIDPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRIDPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRIDPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RIDArrayContext : IdContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT() { return GetToken(KtlynsParser.LBKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT() { return GetToken(KtlynsParser.RBKT, 0); }
		public RIDArrayContext(IdContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRIDArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRIDArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRIDArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RIDSimpleContext : IdContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KtlynsParser.ID, 0); }
		public RIDSimpleContext(IdContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRIDSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRIDSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRIDSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RIDAddressContext : IdContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(KtlynsParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(KtlynsParser.AMP, i);
		}
		public RIDAddressContext(IdContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRIDAddress(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRIDAddress(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRIDAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		return id(0);
	}

	private IdContext id(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdContext _localctx = new IdContext(Context, _parentState);
		IdContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_id, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new RIDSimpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 218;
				Match(ID);
				}
				break;
			case AMP:
				{
				_localctx = new RIDAddressContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 219;
						Match(AMP);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 222;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 224;
				id(2);
				}
				break;
			case STAR:
				{
				_localctx = new RIDPointerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 226;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 225;
						Match(STAR);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 230;
				id(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RIDArrayContext(new IdContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_id);
					State = 233;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 234;
					Match(LBKT);
					State = 235;
					expr(0);
					State = 236;
					Match(RBKT);
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Call_argsContext : ParserRuleContext {
		public List<KExpr> Exprs;
		public Call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_args; } }
	 
		public Call_argsContext() { }
		public virtual void CopyFrom(Call_argsContext context) {
			base.CopyFrom(context);
			this.Exprs = context.Exprs;
		}
	}
	public partial class RCallArgsAddContext : Call_argsContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KtlynsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RCallArgsAddContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgsAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgsAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCallArgsExprContext : Call_argsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RCallArgsExprContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCallArgsContext : Call_argsContext {
		public RCallArgsContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_argsContext call_args() {
		return call_args(0);
	}

	private Call_argsContext call_args(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_argsContext _localctx = new Call_argsContext(Context, _parentState);
		Call_argsContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_call_args, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new RCallArgsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				}
				break;
			case 2:
				{
				_localctx = new RCallArgsExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RCallArgsAddContext(new Call_argsContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_call_args);
					State = 247;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 248;
					Match(COMMA);
					State = 249;
					expr(0);
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mth_decl_argContext : ParserRuleContext {
		public List<KVarDecl> Decls;
		public Mth_decl_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth_decl_arg; } }
	 
		public Mth_decl_argContext() { }
		public virtual void CopyFrom(Mth_decl_argContext context) {
			base.CopyFrom(context);
			this.Decls = context.Decls;
		}
	}
	public partial class RMthDeclArgContext : Mth_decl_argContext {
		public RMthDeclArgContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthDeclArgAddContext : Mth_decl_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mth_decl_argContext mth_decl_arg() {
			return GetRuleContext<Mth_decl_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KtlynsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public RMthDeclArgAddContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArgAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArgAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArgAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthDeclArgVarContext : Mth_decl_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public RMthDeclArgVarContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArgVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArgVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArgVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mth_decl_argContext mth_decl_arg() {
		return mth_decl_arg(0);
	}

	private Mth_decl_argContext mth_decl_arg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mth_decl_argContext _localctx = new Mth_decl_argContext(Context, _parentState);
		Mth_decl_argContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_mth_decl_arg, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new RMthDeclArgContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				}
				break;
			case 2:
				{
				_localctx = new RMthDeclArgVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256;
				var_decl();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RMthDeclArgAddContext(new Mth_decl_argContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_mth_decl_arg);
					State = 259;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 260;
					Match(COMMA);
					State = 261;
					var_decl();
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		case 15: return id_sempred((IdContext)_localctx, predIndex);
		case 16: return call_args_sempred((Call_argsContext)_localctx, predIndex);
		case 17: return mth_decl_arg_sempred((Mth_decl_argContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		}
		return true;
	}
	private bool id_sempred(IdContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 3);
		}
		return true;
	}
	private bool call_args_sempred(Call_argsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool mth_decl_arg_sempred(Mth_decl_argContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x10E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', 
		'\x3', '\x3', '\x4', '\x6', '\x4', '\x32', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '\x33', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'G', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x5', '\x6', 'V', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x66', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8B', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA0', '\n', '\r', '\x5', '\r', 
		'\xA2', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xC8', '\n', '\r', '\f', '\r', '\xE', '\r', '\xCB', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xD2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xD8', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xDF', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xE0', '\x3', '\x11', '\x3', 
		'\x11', '\x6', '\x11', '\xE5', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 
		'\xE6', '\x3', '\x11', '\x5', '\x11', '\xEA', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xF1', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xF4', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF8', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xFD', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x100', '\v', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x104', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\x109', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\x10C', '\v', '\x13', '\x3', '\x13', '\x2', '\x6', '\x18', ' ', 
		'\"', '$', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'\x2', '\x2', '\x2', '\x12A', '\x2', '&', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x46', '\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x65', '\x3', '\x2', '\x2', '\x2', '\xE', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'l', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x14', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xE9', '\x3', '\x2', '\x2', '\x2', '\"', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x103', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\x6', 
		'\x4', '\x2', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', 
		'\x10', '\x2', '\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', '*', '+', 
		'\a', '\x11', '\x2', '\x2', '+', '/', '\x3', '\x2', '\x2', '\x2', ',', 
		'-', '\a', '\x10', '\x2', '\x2', '-', '/', '\a', '\x11', '\x2', '\x2', 
		'.', '(', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\b', '\x5', 
		'\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\x18', '\r', '\x2', '\x36', '\x37', '\a', 
		'\x16', '\x2', '\x2', '\x37', 'G', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\xE', '\b', '\x2', '\x39', ':', '\a', '\x16', '\x2', '\x2', 
		':', 'G', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x5', '\x10', '\t', '\x2', 
		'<', '=', '\a', '\x16', '\x2', '\x2', '=', 'G', '\x3', '\x2', '\x2', '\x2', 
		'>', 'G', '\x5', '\n', '\x6', '\x2', '?', 'G', '\x5', '\f', '\a', '\x2', 
		'@', '\x41', '\a', '\x1C', '\x2', '\x2', '\x41', 'G', '\a', '\x16', '\x2', 
		'\x2', '\x42', 'G', '\x5', '\x12', '\n', '\x2', '\x43', '\x44', '\x5', 
		'\x14', '\v', '\x2', '\x44', '\x45', '\a', '\x16', '\x2', '\x2', '\x45', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x46', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x38', '\x3', '\x2', '\x2', '\x2', '\x46', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '>', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x46', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\x18', 
		'\x2', '\x2', 'I', 'J', '\a', '\xE', '\x2', '\x2', 'J', 'K', '\x5', '\x18', 
		'\r', '\x2', 'K', 'N', '\a', '\xF', '\x2', '\x2', 'L', 'O', '\x5', '\x4', 
		'\x3', '\x2', 'M', 'O', '\x5', '\b', '\x5', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'S', '\a', '\x19', '\x2', '\x2', 'Q', 'T', '\x5', '\x4', 
		'\x3', '\x2', 'R', 'T', '\x5', '\b', '\x5', '\x2', 'S', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'P', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\v', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x1A', 
		'\x2', '\x2', 'X', 'Y', '\a', '\xE', '\x2', '\x2', 'Y', 'Z', '\x5', '\x18', 
		'\r', '\x2', 'Z', '[', '\a', '\xF', '\x2', '\x2', '[', '\\', '\x5', '\x4', 
		'\x3', '\x2', '\\', '\x66', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\x1A', '\x2', '\x2', '^', '_', '\a', '\xE', '\x2', '\x2', '_', '`', '\x5', 
		'\x18', '\r', '\x2', '`', '\x61', '\a', '\x14', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\x18', '\r', '\x2', '\x62', '\x63', '\a', '\xF', '\x2', 
		'\x2', '\x63', '\x64', '\x5', '\x4', '\x3', '\x2', '\x64', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'W', '\x3', '\x2', '\x2', '\x2', '\x65', 
		']', '\x3', '\x2', '\x2', '\x2', '\x66', '\r', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x5', ' ', '\x11', '\x2', 'h', 'i', '\x5', ' ', '\x11', '\x2', 
		'i', 'j', '\a', '\x17', '\x2', '\x2', 'j', 'k', '\x5', '\x18', '\r', '\x2', 
		'k', '\xF', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', ' ', '\x11', 
		'\x2', 'm', 'n', '\x5', ' ', '\x11', '\x2', 'n', 'o', '\a', '\x17', '\x2', 
		'\x2', 'o', 'p', '\a', '\x12', '\x2', '\x2', 'p', 'q', '\a', '\x5', '\x2', 
		'\x2', 'q', 'r', '\a', '\x13', '\x2', '\x2', 'r', 's', '\a', '\xE', '\x2', 
		'\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 't', 'u', '\a', '\xF', '\x2', 
		'\x2', 'u', '\x11', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\x16', 
		'\f', '\x2', 'w', 'x', '\x5', ' ', '\x11', '\x2', 'x', 'y', '\a', '\xE', 
		'\x2', '\x2', 'y', 'z', '\x5', '$', '\x13', '\x2', 'z', '{', '\a', '\xF', 
		'\x2', '\x2', '{', '|', '\x5', '\x4', '\x3', '\x2', '|', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\a', '\'', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x16', '\f', '\x2', '\x7F', '\x80', '\x5', ' ', '\x11', '\x2', 
		'\x80', '\x81', '\a', '\xE', '\x2', '\x2', '\x81', '\x82', '\x5', '$', 
		'\x13', '\x2', '\x82', '\x83', '\a', '\xF', '\x2', '\x2', '\x83', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x8B', '\a', '&', '\x2', '\x2', '\x85', 
		'\x86', '\a', '&', '\x2', '\x2', '\x86', '\x87', '\a', '$', '\x2', '\x2', 
		'\x87', '\x88', '\x5', ' ', '\x11', '\x2', '\x88', '\x89', '\a', '\"', 
		'\x2', '\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\b', '\r', 
		'\x1', '\x2', '\x8D', '\xA2', '\x5', '\x1E', '\x10', '\x2', '\x8E', '\xA2', 
		'\x5', ' ', '\x11', '\x2', '\x8F', '\x90', '\x5', ' ', '\x11', '\x2', 
		'\x90', '\x91', '\a', '\xE', '\x2', '\x2', '\x91', '\x92', '\x5', '\"', 
		'\x12', '\x2', '\x92', '\x93', '\a', '\xF', '\x2', '\x2', '\x93', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\xE', '\x2', '\x2', 
		'\x95', '\x96', '\x5', '\x18', '\r', '\x2', '\x96', '\x97', '\a', '\xF', 
		'\x2', '\x2', '\x97', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x98', '\xA2', 
		'\x5', '\x1A', '\xE', '\x2', '\x99', '\x9A', '\x5', ' ', '\x11', '\x2', 
		'\x9A', '\x9B', '\a', '\x17', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x18', 
		'\r', '\x4', '\x9C', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', 
		'\a', '\x1B', '\x2', '\x2', '\x9E', '\xA0', '\x5', '\x18', '\r', '\x2', 
		'\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x98', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\f', '\x10', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\v', '\x2', '\x2', '\xA5', '\xC8', 
		'\x5', '\x18', '\r', '\x11', '\xA6', '\xA7', '\f', '\xF', '\x2', '\x2', 
		'\xA7', '\xA8', '\a', '\n', '\x2', '\x2', '\xA8', '\xC8', '\x5', '\x18', 
		'\r', '\x10', '\xA9', '\xAA', '\f', '\xE', '\x2', '\x2', '\xAA', '\xAB', 
		'\a', '\b', '\x2', '\x2', '\xAB', '\xC8', '\x5', '\x18', '\r', '\xF', 
		'\xAC', '\xAD', '\f', '\r', '\x2', '\x2', '\xAD', '\xAE', '\a', '\t', 
		'\x2', '\x2', '\xAE', '\xC8', '\x5', '\x18', '\r', '\xE', '\xAF', '\xB0', 
		'\f', '\f', '\x2', '\x2', '\xB0', '\xB1', '\a', ' ', '\x2', '\x2', '\xB1', 
		'\xC8', '\x5', '\x18', '\r', '\r', '\xB2', '\xB3', '\f', '\v', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '!', '\x2', '\x2', '\xB4', '\xC8', '\x5', 
		'\x18', '\r', '\f', '\xB5', '\xB6', '\f', '\n', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\"', '\x2', '\x2', '\xB7', '\xC8', '\x5', '\x18', '\r', 
		'\v', '\xB8', '\xB9', '\f', '\t', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'#', '\x2', '\x2', '\xBA', '\xC8', '\x5', '\x18', '\r', '\n', '\xBB', 
		'\xBC', '\f', '\b', '\x2', '\x2', '\xBC', '\xBD', '\a', '$', '\x2', '\x2', 
		'\xBD', '\xC8', '\x5', '\x18', '\r', '\t', '\xBE', '\xBF', '\f', '\a', 
		'\x2', '\x2', '\xBF', '\xC0', '\a', '%', '\x2', '\x2', '\xC0', '\xC8', 
		'\x5', '\x18', '\r', '\b', '\xC1', '\xC2', '\f', '\x6', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\x1D', '\x2', '\x2', '\xC3', '\xC8', '\x5', '\x18', 
		'\r', '\a', '\xC4', '\xC5', '\f', '\x5', '\x2', '\x2', '\xC5', '\xC6', 
		'\a', '\x1E', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x18', '\r', '\x6', 
		'\xC7', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x19', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xD2', '\x5', '\x1C', '\xF', '\x2', '\xCD', '\xCE', 
		'\a', '\t', '\x2', '\x2', '\xCE', '\xD2', '\x5', '\x1C', '\xF', '\x2', 
		'\xCF', '\xD0', '\a', '\x1F', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\x1C', 
		'\xF', '\x2', '\xD1', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD8', '\a', '\x5', 
		'\x2', '\x2', '\xD4', '\xD8', '\a', '\x4', '\x2', '\x2', '\xD5', '\xD8', 
		'\a', '\x6', '\x2', '\x2', '\xD6', '\xD8', '\a', '\a', '\x2', '\x2', '\xD7', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', '\r', '\x2', '\x2', '\xDA', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\b', '\x11', '\x1', '\x2', '\xDC', '\xEA', '\a', 
		'(', '\x2', '\x2', '\xDD', '\xDF', '\a', '\f', '\x2', '\x2', '\xDE', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xEA', 
		'\x5', ' ', '\x11', '\x4', '\xE3', '\xE5', '\a', '\v', '\x2', '\x2', '\xE4', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEA', '\x5', ' ', '\x11', '\x3', '\xE9', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\f', '\x5', '\x2', '\x2', '\xEC', '\xED', '\a', '\x12', '\x2', 
		'\x2', '\xED', '\xEE', '\x5', '\x18', '\r', '\x2', '\xEE', '\xEF', '\a', 
		'\x13', '\x2', '\x2', '\xEF', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '!', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\b', '\x12', '\x1', 
		'\x2', '\xF6', '\xF8', '\x5', '\x18', '\r', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\f', '\x3', '\x2', 
		'\x2', '\xFA', '\xFB', '\a', '\x14', '\x2', '\x2', '\xFB', '\xFD', '\x5', 
		'\x18', '\r', '\x2', '\xFC', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x104', '\b', '\x13', '\x1', '\x2', '\x102', '\x104', '\x5', '\xE', '\b', 
		'\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\f', '\x3', '\x2', '\x2', '\x106', '\x107', '\a', '\x14', 
		'\x2', '\x2', '\x107', '\x109', '\x5', '\xE', '\b', '\x2', '\x108', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '%', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x18', '.', '\x33', '\x46', 'N', 
		'S', 'U', '\x65', '\x8A', '\x9F', '\xA1', '\xC7', '\xC9', '\xD1', '\xD7', 
		'\xE0', '\xE6', '\xE9', '\xF2', '\xF7', '\xFE', '\x103', '\x10A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
