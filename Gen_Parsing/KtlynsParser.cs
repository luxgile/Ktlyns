//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ktlyns.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

 
	using Kat; 
	using System.Collections.Generic;
	
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class KtlynsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, DEC=2, INT=3, PLUS=4, MINUS=5, SLASH=6, STAR=7, STR=8, LPRN=9, RPRN=10, 
		LBRC=11, RBRC=12, LARR=13, RARR=14, COMMA=15, DOT=16, SDOT=17, EQ=18, 
		IF=19, ELSE=20, AT=21, RET=22, AND=23, OR=24, NOT=25, EQEQ=26, NEQEQ=27, 
		GREAT=28, EQGREAT=29, LESS=30, EQLESS=31, METHOD=32, ID=33;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_var_decl = 4, RULE_mth_decl = 5, RULE_mth = 6, RULE_expr = 7, RULE_unary = 8, 
		RULE_number = 9, RULE_string = 10, RULE_id = 11, RULE_call_args = 12, 
		RULE_mth_decl_arg = 13;
	public static readonly string[] ruleNames = {
		"program", "block", "statements", "statement", "var_decl", "mth_decl", 
		"mth", "expr", "unary", "number", "string", "id", "call_args", "mth_decl_arg"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'+'", "'-'", "'/'", "'*'", null, "'('", "')'", 
		"'{'", "'}'", "'<'", "'>'", "','", "'.'", "';'", "'='", "'if'", "'else'", 
		"'@'", "'ret'", "'and'", "'or'", "'not'", "'equals'", "'not equals'", 
		"'great'", "'eq great'", "'less'", "'eq less'", "'method'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "DEC", "INT", "PLUS", "MINUS", "SLASH", "STAR", "STR", "LPRN", 
		"RPRN", "LBRC", "RBRC", "LARR", "RARR", "COMMA", "DOT", "SDOT", "EQ", 
		"IF", "ELSE", "AT", "RET", "AND", "OR", "NOT", "EQEQ", "NEQEQ", "GREAT", 
		"EQGREAT", "LESS", "EQLESS", "METHOD", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ktlyns.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KtlynsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KtlynsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KtlynsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public KBlock Block;
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
			this.Block = context.Block;
		}
	}
	public partial class RBlockEmptyContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(KtlynsParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(KtlynsParser.RBRC, 0); }
		public RBlockEmptyContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRBlockEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRBlockEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRBlockEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RBlockStmtsContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(KtlynsParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(KtlynsParser.RBRC, 0); }
		public RBlockStmtsContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRBlockStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRBlockStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRBlockStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new RBlockStmtsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				Match(LBRC);
				State = 31;
				statements();
				State = 32;
				Match(RBRC);
				}
				break;
			case 2:
				_localctx = new RBlockEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				Match(LBRC);
				State = 35;
				Match(RBRC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public KBlock Block;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 38;
				statement();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEC) | (1L << INT) | (1L << MINUS) | (1L << STR) | (1L << LPRN) | (1L << RET) | (1L << METHOD) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public KStmt Stmt;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementVarDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDOT() { return GetToken(KtlynsParser.SDOT, 0); }
		public RStatementVarDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RStatementMthDeclContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mth_declContext mth_decl() {
			return GetRuleContext<Mth_declContext>(0);
		}
		public RStatementMthDeclContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRStatementMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRStatementMthDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRStatementMthDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new RStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				expr(0);
				State = 44;
				Match(SDOT);
				}
				break;
			case 2:
				_localctx = new RStatementVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				var_decl();
				State = 47;
				Match(SDOT);
				}
				break;
			case 3:
				_localctx = new RStatementMthDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				mth_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public KStmt Stmt;
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
			this.Stmt = context.Stmt;
		}
	}
	public partial class RVarDeclExprContext : Var_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KtlynsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RVarDeclExprContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRVarDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRVarDeclExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRVarDeclExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RVarDeclContext : Var_declContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public RVarDeclContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_var_decl);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new RVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				id();
				State = 53;
				id();
				}
				break;
			case 2:
				_localctx = new RVarDeclExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				id();
				State = 56;
				id();
				State = 57;
				Match(EQ);
				State = 58;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mth_declContext : ParserRuleContext {
		public KStmt Stmt;
		[System.Diagnostics.DebuggerNonUserCode] public MthContext mth() {
			return GetRuleContext<MthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mth_decl_argContext mth_decl_arg() {
			return GetRuleContext<Mth_decl_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Mth_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterMth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitMth_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMth_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mth_declContext mth_decl() {
		Mth_declContext _localctx = new Mth_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_mth_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			mth();
			State = 63;
			id();
			State = 64;
			Match(LPRN);
			State = 65;
			mth_decl_arg(0);
			State = 66;
			Match(RPRN);
			State = 67;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MthContext : ParserRuleContext {
		public KId Id;
		public MthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth; } }
	 
		public MthContext() { }
		public virtual void CopyFrom(MthContext context) {
			base.CopyFrom(context);
			this.Id = context.Id;
		}
	}
	public partial class RMthVoidContext : MthContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(KtlynsParser.METHOD, 0); }
		public RMthVoidContext(MthContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthTypeContext : MthContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(KtlynsParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARR() { return GetToken(KtlynsParser.LARR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARR() { return GetToken(KtlynsParser.RARR, 0); }
		public RMthTypeContext(MthContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MthContext mth() {
		MthContext _localctx = new MthContext(Context, State);
		EnterRule(_localctx, 12, RULE_mth);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new RMthVoidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				Match(METHOD);
				}
				break;
			case 2:
				_localctx = new RMthTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				Match(METHOD);
				State = 71;
				Match(LARR);
				State = 72;
				id();
				State = 73;
				Match(RARR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public KExpr Expr;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.Expr = context.Expr;
		}
	}
	public partial class RExprUnaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public RExprUnaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(KtlynsParser.SLASH, 0); }
		public RExprBinDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinAddContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KtlynsParser.PLUS, 0); }
		public RExprBinAddContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KtlynsParser.MINUS, 0); }
		public RExprBinSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprAssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KtlynsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RExprAssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public RExprCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprBinMultContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KtlynsParser.STAR, 0); }
		public RExprBinMultContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprBinMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprBinMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprBinMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprReturnContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET() { return GetToken(KtlynsParser.RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RExprReturnContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public RExprStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprGroupContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPRN() { return GetToken(KtlynsParser.LPRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRN() { return GetToken(KtlynsParser.RPRN, 0); }
		public RExprGroupContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RExprIdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public RExprIdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRExprId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRExprId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRExprId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new RExprStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 78;
				@string();
				}
				break;
			case 2:
				{
				_localctx = new RExprIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79;
				id();
				}
				break;
			case 3:
				{
				_localctx = new RExprAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80;
				id();
				State = 81;
				Match(EQ);
				State = 82;
				expr(9);
				}
				break;
			case 4:
				{
				_localctx = new RExprCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84;
				id();
				State = 85;
				Match(LPRN);
				State = 86;
				call_args(0);
				State = 87;
				Match(RPRN);
				}
				break;
			case 5:
				{
				_localctx = new RExprGroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89;
				Match(LPRN);
				State = 90;
				expr(0);
				State = 91;
				Match(RPRN);
				}
				break;
			case 6:
				{
				_localctx = new RExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93;
				unary();
				}
				break;
			case 7:
				{
				_localctx = new RExprReturnContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94;
				Match(RET);
				State = 96;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 95;
					expr(0);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 112;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new RExprBinMultContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 101;
						Match(STAR);
						State = 102;
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new RExprBinDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 104;
						Match(SLASH);
						State = 105;
						expr(5);
						}
						break;
					case 3:
						{
						_localctx = new RExprBinAddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 107;
						Match(PLUS);
						State = 108;
						expr(4);
						}
						break;
					case 4:
						{
						_localctx = new RExprBinSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 110;
						Match(MINUS);
						State = 111;
						expr(3);
						}
						break;
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public KExpr Expr;
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KtlynsParser.MINUS, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				number();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				Match(MINUS);
				State = 119;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public KExpr Expr;
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
			this.Expr = context.Expr;
		}
	}
	public partial class RNumberDecContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(KtlynsParser.DEC, 0); }
		public RNumberDecContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRNumberDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRNumberDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRNumberDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RNumberIntContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KtlynsParser.INT, 0); }
		public RNumberIntContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRNumberInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRNumberInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRNumberInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 18, RULE_number);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new RNumberIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(INT);
				}
				break;
			case DEC:
				_localctx = new RNumberDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				Match(DEC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public KStr Str;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(KtlynsParser.STR, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 20, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public KId Id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KtlynsParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 22, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_argsContext : ParserRuleContext {
		public List<KExpr> Exprs;
		public Call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_args; } }
	 
		public Call_argsContext() { }
		public virtual void CopyFrom(Call_argsContext context) {
			base.CopyFrom(context);
			this.Exprs = context.Exprs;
		}
	}
	public partial class RCallArgsAddContext : Call_argsContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KtlynsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RCallArgsAddContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgsAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgsAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCallArgsExprContext : Call_argsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RCallArgsExprContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCallArgsContext : Call_argsContext {
		public RCallArgsContext(Call_argsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_argsContext call_args() {
		return call_args(0);
	}

	private Call_argsContext call_args(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_argsContext _localctx = new Call_argsContext(Context, _parentState);
		Call_argsContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_call_args, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new RCallArgsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				}
				break;
			case 2:
				{
				_localctx = new RCallArgsExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RCallArgsAddContext(new Call_argsContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_call_args);
					State = 134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 135;
					Match(COMMA);
					State = 136;
					expr(0);
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mth_decl_argContext : ParserRuleContext {
		public List<KVarDecl> Decls;
		public Mth_decl_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mth_decl_arg; } }
	 
		public Mth_decl_argContext() { }
		public virtual void CopyFrom(Mth_decl_argContext context) {
			base.CopyFrom(context);
			this.Decls = context.Decls;
		}
	}
	public partial class RMthDeclArgContext : Mth_decl_argContext {
		public RMthDeclArgContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthDeclArgAddContext : Mth_decl_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mth_decl_argContext mth_decl_arg() {
			return GetRuleContext<Mth_decl_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KtlynsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public RMthDeclArgAddContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArgAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArgAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArgAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMthDeclArgVarContext : Mth_decl_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public RMthDeclArgVarContext(Mth_decl_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.EnterRMthDeclArgVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKtlynsListener typedListener = listener as IKtlynsListener;
			if (typedListener != null) typedListener.ExitRMthDeclArgVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKtlynsVisitor<TResult> typedVisitor = visitor as IKtlynsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMthDeclArgVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mth_decl_argContext mth_decl_arg() {
		return mth_decl_arg(0);
	}

	private Mth_decl_argContext mth_decl_arg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mth_decl_argContext _localctx = new Mth_decl_argContext(Context, _parentState);
		Mth_decl_argContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_mth_decl_arg, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new RMthDeclArgContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				}
				break;
			case 2:
				{
				_localctx = new RMthDeclArgVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				var_decl();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RMthDeclArgAddContext(new Mth_decl_argContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_mth_decl_arg);
					State = 146;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 147;
					Match(COMMA);
					State = 148;
					var_decl();
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		case 12: return call_args_sempred((Call_argsContext)_localctx, predIndex);
		case 13: return mth_decl_arg_sempred((Mth_decl_argContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool call_args_sempred(Call_argsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool mth_decl_arg_sempred(Mth_decl_argContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\x9D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\'', '\n', '\x3', '\x3', '\x4', '\x6', '\x4', '*', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', '+', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x35', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '?', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'N', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x63', '\n', 
		'\t', '\x5', '\t', '\x65', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 's', '\n', 
		'\t', '\f', '\t', '\xE', '\t', 'v', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '{', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x7F', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x87', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x8C', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\x8F', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x93', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\x98', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x9B', 
		'\v', '\xF', '\x3', '\xF', '\x2', '\x5', '\x10', '\x1A', '\x1C', '\x10', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x2', '\x2', '\x2', '\xA5', '\x2', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', 
		')', '\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\n', '>', '\x3', '\x2', '\x2', '\x2', '\f', '@', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'z', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x16', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x92', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x5', '\x6', '\x4', '\x2', '\x1F', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\r', '\x2', '\x2', '!', '\"', '\x5', '\x6', '\x4', 
		'\x2', '\"', '#', '\a', '\xE', '\x2', '\x2', '#', '\'', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', '\r', '\x2', '\x2', '%', '\'', '\a', '\xE', 
		'\x2', '\x2', '&', ' ', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', 
		'\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', 
		'\b', '\x5', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', 
		'\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '\a', '\x3', '\x2', '\x2', '\x2', '-', '.', 
		'\x5', '\x10', '\t', '\x2', '.', '/', '\a', '\x13', '\x2', '\x2', '/', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\n', '\x6', 
		'\x2', '\x31', '\x32', '\a', '\x13', '\x2', '\x2', '\x32', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\x5', '\f', '\a', '\x2', '\x34', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x34', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x5', '\x18', '\r', '\x2', '\x37', 
		'\x38', '\x5', '\x18', '\r', '\x2', '\x38', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x5', '\x18', '\r', '\x2', ':', ';', '\x5', '\x18', 
		'\r', '\x2', ';', '<', '\a', '\x14', '\x2', '\x2', '<', '=', '\x5', '\x10', 
		'\t', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x39', '\x3', '\x2', '\x2', '\x2', '?', '\v', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\xE', '\b', '\x2', '\x41', 
		'\x42', '\x5', '\x18', '\r', '\x2', '\x42', '\x43', '\a', '\v', '\x2', 
		'\x2', '\x43', '\x44', '\x5', '\x1C', '\xF', '\x2', '\x44', '\x45', '\a', 
		'\f', '\x2', '\x2', '\x45', '\x46', '\x5', '\x4', '\x3', '\x2', '\x46', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'G', 'N', '\a', '\"', '\x2', '\x2', 
		'H', 'I', '\a', '\"', '\x2', '\x2', 'I', 'J', '\a', '\xF', '\x2', '\x2', 
		'J', 'K', '\x5', '\x18', '\r', '\x2', 'K', 'L', '\a', '\x10', '\x2', '\x2', 
		'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'G', '\x3', '\x2', '\x2', '\x2', 
		'M', 'H', '\x3', '\x2', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\b', '\t', '\x1', '\x2', 'P', '\x65', '\x5', '\x16', 
		'\f', '\x2', 'Q', '\x65', '\x5', '\x18', '\r', '\x2', 'R', 'S', '\x5', 
		'\x18', '\r', '\x2', 'S', 'T', '\a', '\x14', '\x2', '\x2', 'T', 'U', '\x5', 
		'\x10', '\t', '\v', 'U', '\x65', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\x5', '\x18', '\r', '\x2', 'W', 'X', '\a', '\v', '\x2', '\x2', 'X', 'Y', 
		'\x5', '\x1A', '\xE', '\x2', 'Y', 'Z', '\a', '\f', '\x2', '\x2', 'Z', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\v', '\x2', '\x2', 
		'\\', ']', '\x5', '\x10', '\t', '\x2', ']', '^', '\a', '\f', '\x2', '\x2', 
		'^', '\x65', '\x3', '\x2', '\x2', '\x2', '_', '\x65', '\x5', '\x12', '\n', 
		'\x2', '`', '\x62', '\a', '\x18', '\x2', '\x2', '\x61', '\x63', '\x5', 
		'\x10', '\t', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'O', '\x3', '\x2', '\x2', '\x2', '\x64', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x64', 'R', '\x3', '\x2', '\x2', '\x2', '\x64', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '[', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 't', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\f', '\a', '\x2', 
		'\x2', 'g', 'h', '\a', '\t', '\x2', '\x2', 'h', 's', '\x5', '\x10', '\t', 
		'\b', 'i', 'j', '\f', '\x6', '\x2', '\x2', 'j', 'k', '\a', '\b', '\x2', 
		'\x2', 'k', 's', '\x5', '\x10', '\t', '\a', 'l', 'm', '\f', '\x5', '\x2', 
		'\x2', 'm', 'n', '\a', '\x6', '\x2', '\x2', 'n', 's', '\x5', '\x10', '\t', 
		'\x6', 'o', 'p', '\f', '\x4', '\x2', '\x2', 'p', 'q', '\a', '\a', '\x2', 
		'\x2', 'q', 's', '\x5', '\x10', '\t', '\x5', 'r', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'i', '\x3', '\x2', '\x2', '\x2', 'r', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'o', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\x11', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'w', '{', '\x5', '\x14', '\v', '\x2', 'x', 'y', '\a', 
		'\a', '\x2', '\x2', 'y', '{', '\x5', '\x14', '\v', '\x2', 'z', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\a', '\x5', '\x2', '\x2', '}', 
		'\x7F', '\a', '\x4', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\n', '\x2', '\x2', '\x81', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\a', '#', '\x2', '\x2', '\x83', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\b', '\xE', '\x1', 
		'\x2', '\x85', '\x87', '\x5', '\x10', '\t', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\f', '\x3', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\x11', '\x2', '\x2', '\x8A', '\x8C', '\x5', 
		'\x10', '\t', '\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x93', '\b', '\xF', '\x1', '\x2', '\x91', '\x93', '\x5', '\n', '\x6', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x99', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\f', '\x3', '\x2', '\x2', '\x95', '\x96', '\a', '\x11', '\x2', 
		'\x2', '\x96', '\x98', '\x5', '\n', '\x6', '\x2', '\x97', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '&', '+', '\x34', '>', 'M', '\x62', '\x64', 
		'r', 't', 'z', '~', '\x86', '\x8D', '\x92', '\x99',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
